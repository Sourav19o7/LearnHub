{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soura\\\\Projects\\\\LearnHub\\\\frontend\\\\src\\\\components\\\\auth\\\\InstructorRoute.tsx\",\n  _s = $RefreshSig$();\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\nimport LoadingScreen from '../common/LoadingScreen';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InstructorRoute = ({\n  children,\n  redirectTo = '/login'\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isInstructor,\n    isAdmin,\n    isLoading\n  } = useAuth();\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Allow both instructors and admins to access instructor routes\n  if (isAuthenticated && (isInstructor || isAdmin)) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: children\n    }, void 0, false);\n  }\n\n  // If authenticated but not instructor/admin, redirect to dashboard\n  if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Not authenticated, redirect to login\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: redirectTo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_s(InstructorRoute, \"5V5fQC05SaiR5Fqi2pRoLU0FCV8=\", false, function () {\n  return [useAuth];\n});\n_c = InstructorRoute;\nexport default InstructorRoute;\nvar _c;\n$RefreshReg$(_c, \"InstructorRoute\");","map":{"version":3,"names":["Navigate","useAuth","LoadingScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","InstructorRoute","children","redirectTo","_s","isAuthenticated","isInstructor","isAdmin","isLoading","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/soura/Projects/LearnHub/frontend/src/components/auth/InstructorRoute.tsx"],"sourcesContent":["import { Navigate } from 'react-router-dom';\r\nimport { ReactNode } from 'react';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport LoadingScreen from '../common/LoadingScreen';\r\n\r\ninterface InstructorRouteProps {\r\n  children: ReactNode;\r\n  redirectTo?: string;\r\n}\r\n\r\nconst InstructorRoute = ({ children, redirectTo = '/login' }: InstructorRouteProps) => {\r\n  const { isAuthenticated, isInstructor, isAdmin, isLoading } = useAuth();\r\n\r\n  if (isLoading) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  // Allow both instructors and admins to access instructor routes\r\n  if (isAuthenticated && (isInstructor || isAdmin)) {\r\n    return <>{children}</>;\r\n  }\r\n\r\n  // If authenticated but not instructor/admin, redirect to dashboard\r\n  if (isAuthenticated) {\r\n    return <Navigate to=\"/dashboard\" />;\r\n  }\r\n\r\n  // Not authenticated, redirect to login\r\n  return <Navigate to={redirectTo} />;\r\n};\r\n\r\nexport default InstructorRoute;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,SAASC,OAAO,QAAQ,2BAA2B;AACnD,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAOpD,MAAMC,eAAe,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU,GAAG;AAA+B,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM;IAAEC,eAAe;IAAEC,YAAY;IAAEC,OAAO;IAAEC;EAAU,CAAC,GAAGb,OAAO,CAAC,CAAC;EAEvE,IAAIa,SAAS,EAAE;IACb,oBAAOV,OAAA,CAACF,aAAa;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1B;;EAEA;EACA,IAAIP,eAAe,KAAKC,YAAY,IAAIC,OAAO,CAAC,EAAE;IAChD,oBAAOT,OAAA,CAAAE,SAAA;MAAAE,QAAA,EAAGA;IAAQ,gBAAG,CAAC;EACxB;;EAEA;EACA,IAAIG,eAAe,EAAE;IACnB,oBAAOP,OAAA,CAACJ,QAAQ;MAACmB,EAAE,EAAC;IAAY;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC;;EAEA;EACA,oBAAOd,OAAA,CAACJ,QAAQ;IAACmB,EAAE,EAAEV;EAAW;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrC,CAAC;AAACR,EAAA,CAnBIH,eAAe;EAAA,QAC2CN,OAAO;AAAA;AAAAmB,EAAA,GADjEb,eAAe;AAqBrB,eAAeA,eAAe;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}