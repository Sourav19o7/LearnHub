{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soura\\\\Projects\\\\LearnHub\\\\frontend\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  theme: 'dark',\n  toggleTheme: () => {},\n  isDark: true\n});\nexport function useTheme() {\n  _s();\n  return useContext(ThemeContext);\n}\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setTheme] = useState('dark');\n  useEffect(() => {\n    // Check for saved theme preference or use system preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else {\n      // Check for system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setTheme(prefersDark ? 'dark' : 'light');\n    }\n  }, []);\n  useEffect(() => {\n    // Apply theme class to document body\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  const value = {\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_s2(ThemeProvider, \"FaR+67HYMnxyxOLL3EkvHKRjhfs=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","isDark","useTheme","_s","ThemeProvider","children","_s2","setTheme","savedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","document","documentElement","classList","add","remove","setItem","prevTheme","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/soura/Projects/LearnHub/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\n\r\ntype ThemeMode = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: ThemeMode;\r\n  toggleTheme: () => void;\r\n  isDark: boolean;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType>({\r\n  theme: 'dark',\r\n  toggleTheme: () => {},\r\n  isDark: true\r\n});\r\n\r\nexport function useTheme() {\r\n  return useContext(ThemeContext);\r\n}\r\n\r\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\r\n  const [theme, setTheme] = useState<ThemeMode>('dark');\r\n\r\n  useEffect(() => {\r\n    // Check for saved theme preference or use system preference\r\n    const savedTheme = localStorage.getItem('theme') as ThemeMode;\r\n    if (savedTheme) {\r\n      setTheme(savedTheme);\r\n    } else {\r\n      // Check for system preference\r\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      setTheme(prefersDark ? 'dark' : 'light');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Apply theme class to document body\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n    \r\n    // Save theme preference to localStorage\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  const value = {\r\n    theme,\r\n    toggleTheme,\r\n    isDark: theme === 'dark'\r\n  };\r\n\r\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\r\n};"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUlF,MAAMC,YAAY,gBAAGN,aAAa,CAAmB;EACnDO,KAAK,EAAE,MAAM;EACbC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;EACrBC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACzB,OAAOV,UAAU,CAACK,YAAY,CAAC;AACjC;AAACK,EAAA,CAFeD,QAAQ;AAIxB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,GAAA;EACtE,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAGZ,QAAQ,CAAY,MAAM,CAAC;EAErDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAc;IAC7D,IAAIF,UAAU,EAAE;MACdD,QAAQ,CAACC,UAAU,CAAC;IACtB,CAAC,MAAM;MACL;MACA,MAAMG,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MAC7EP,QAAQ,CAACI,WAAW,GAAG,MAAM,GAAG,OAAO,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;EAENjB,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,KAAK,KAAK,MAAM,EAAE;MACpBgB,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;;IAEA;IACAV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAErB,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBO,QAAQ,CAACc,SAAS,IAAKA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACnE,CAAC;EAED,MAAMC,KAAK,GAAG;IACZvB,KAAK;IACLC,WAAW;IACXC,MAAM,EAAEF,KAAK,KAAK;EACpB,CAAC;EAED,oBAAOF,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EAAEA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAwB,CAAC;AAChF,CAAC;AAACrB,GAAA,CAtCWF,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}