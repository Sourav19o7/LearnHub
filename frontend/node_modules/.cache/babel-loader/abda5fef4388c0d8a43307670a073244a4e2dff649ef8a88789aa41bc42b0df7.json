{"ast":null,"code":"import supabase from './supabase';\n// Get current session\nexport const getSession = async () => {\n  const {\n    data: {\n      session\n    },\n    error\n  } = await supabase.auth.getSession();\n  if (error) {\n    console.error('Error getting session:', error.message);\n    return null;\n  }\n  return session;\n};\n\n// Get current user\nexport const getCurrentUser = async () => {\n  const {\n    data: {\n      user\n    },\n    error\n  } = await supabase.auth.getUser();\n  if (error) {\n    console.error('Error getting user:', error.message);\n    return null;\n  }\n  return user;\n};\n\n// Sign up user\nexport const signUp = async (email, password, first_name, last_name) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          first_name,\n          last_name\n        }\n      }\n    });\n    if (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n    return {\n      success: true,\n      message: 'Signup successful! Please check your email for confirmation.',\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || 'An error occurred during signup'\n    };\n  }\n};\n\n// Sign in user\nexport const signIn = async (email, password) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n    return {\n      success: true,\n      message: 'Login successful!',\n      data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || 'An error occurred during login'\n    };\n  }\n};\n\n// Sign out user\nexport const signOut = async () => {\n  try {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n    return {\n      success: true,\n      message: 'Logout successful!'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || 'An error occurred during logout'\n    };\n  }\n};\n\n// Reset password\nexport const resetPassword = async email => {\n  try {\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    if (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n    return {\n      success: true,\n      message: 'Password reset email sent. Please check your inbox.'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || 'An error occurred'\n    };\n  }\n};\n\n// Update password\nexport const updatePassword = async newPassword => {\n  try {\n    const {\n      error\n    } = await supabase.auth.updateUser({\n      password: newPassword\n    });\n    if (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n    return {\n      success: true,\n      message: 'Password updated successfully!'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || 'An error occurred'\n    };\n  }\n};\n\n// Get user profile\nexport const getUserProfile = async () => {\n  const user = await getCurrentUser();\n  if (!user) return null;\n  const {\n    data,\n    error\n  } = await supabase.from('profiles').select('*').eq('id', user.id).single();\n  if (error) {\n    console.error('Error fetching profile:', error.message);\n    return null;\n  }\n  return data;\n};\n\n// Update user profile\nexport const updateUserProfile = async profile => {\n  const user = await getCurrentUser();\n  if (!user) return {\n    success: false,\n    message: 'Not authenticated'\n  };\n  const {\n    data,\n    error\n  } = await supabase.from('profiles').update(profile).eq('id', user.id).select().single();\n  if (error) {\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n  return {\n    success: true,\n    message: 'Profile updated successfully!',\n    data\n  };\n};","map":{"version":3,"names":["supabase","getSession","data","session","error","auth","console","message","getCurrentUser","user","getUser","signUp","email","password","first_name","last_name","options","success","signIn","signInWithPassword","signOut","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","updatePassword","newPassword","updateUser","getUserProfile","from","select","eq","id","single","updateUserProfile","profile","update"],"sources":["C:/Users/soura/Projects/LearnHub/frontend/src/lib/auth.ts"],"sourcesContent":["import supabase from './supabase';\r\nimport { Session, User } from '@supabase/supabase-js';\r\n\r\n// Get current session\r\nexport const getSession = async (): Promise<Session | null> => {\r\n  const { data: { session }, error } = await supabase.auth.getSession();\r\n  if (error) {\r\n    console.error('Error getting session:', error.message);\r\n    return null;\r\n  }\r\n  return session;\r\n};\r\n\r\n// Get current user\r\nexport const getCurrentUser = async (): Promise<User | null> => {\r\n  const { data: { user }, error } = await supabase.auth.getUser();\r\n  if (error) {\r\n    console.error('Error getting user:', error.message);\r\n    return null;\r\n  }\r\n  return user;\r\n};\r\n\r\n// Sign up user\r\nexport const signUp = async (\r\n  email: string,\r\n  password: string,\r\n  first_name: string,\r\n  last_name: string\r\n): Promise<{ success: boolean; message: string; data?: any }> => {\r\n  try {\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n      options: {\r\n        data: {\r\n          first_name,\r\n          last_name,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Signup successful! Please check your email for confirmation.',\r\n      data,\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      message: error.message || 'An error occurred during signup',\r\n    };\r\n  }\r\n};\r\n\r\n// Sign in user\r\nexport const signIn = async (\r\n  email: string,\r\n  password: string\r\n): Promise<{ success: boolean; message: string; data?: any }> => {\r\n  try {\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password,\r\n    });\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Login successful!',\r\n      data,\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      message: error.message || 'An error occurred during login',\r\n    };\r\n  }\r\n};\r\n\r\n// Sign out user\r\nexport const signOut = async (): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const { error } = await supabase.auth.signOut();\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Logout successful!',\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      message: error.message || 'An error occurred during logout',\r\n    };\r\n  }\r\n};\r\n\r\n// Reset password\r\nexport const resetPassword = async (\r\n  email: string\r\n): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n      redirectTo: `${window.location.origin}/reset-password`,\r\n    });\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Password reset email sent. Please check your inbox.',\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      message: error.message || 'An error occurred',\r\n    };\r\n  }\r\n};\r\n\r\n// Update password\r\nexport const updatePassword = async (\r\n  newPassword: string\r\n): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    const { error } = await supabase.auth.updateUser({\r\n      password: newPassword,\r\n    });\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Password updated successfully!',\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      message: error.message || 'An error occurred',\r\n    };\r\n  }\r\n};\r\n\r\n// Get user profile\r\nexport const getUserProfile = async () => {\r\n  const user = await getCurrentUser();\r\n  if (!user) return null;\r\n\r\n  const { data, error } = await supabase\r\n    .from('profiles')\r\n    .select('*')\r\n    .eq('id', user.id)\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error fetching profile:', error.message);\r\n    return null;\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// Update user profile\r\nexport const updateUserProfile = async (profile: any) => {\r\n  const user = await getCurrentUser();\r\n  if (!user) return { success: false, message: 'Not authenticated' };\r\n\r\n  const { data, error } = await supabase\r\n    .from('profiles')\r\n    .update(profile)\r\n    .eq('id', user.id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    return {\r\n      success: false,\r\n      message: error.message,\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: true,\r\n    message: 'Profile updated successfully!',\r\n    data,\r\n  };\r\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAGjC;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAqC;EAC7D,MAAM;IAAEC,IAAI,EAAE;MAAEC;IAAQ,CAAC;IAAEC;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACJ,UAAU,CAAC,CAAC;EACrE,IAAIG,KAAK,EAAE;IACTE,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACG,OAAO,CAAC;IACtD,OAAO,IAAI;EACb;EACA,OAAOJ,OAAO;AAChB,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAG,MAAAA,CAAA,KAAkC;EAC9D,MAAM;IAAEN,IAAI,EAAE;MAAEO;IAAK,CAAC;IAAEL;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACK,OAAO,CAAC,CAAC;EAC/D,IAAIN,KAAK,EAAE;IACTE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACG,OAAO,CAAC;IACnD,OAAO,IAAI;EACb;EACA,OAAOE,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAME,MAAM,GAAG,MAAAA,CACpBC,KAAa,EACbC,QAAgB,EAChBC,UAAkB,EAClBC,SAAiB,KAC8C;EAC/D,IAAI;IACF,MAAM;MAAEb,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACM,MAAM,CAAC;MACjDC,KAAK;MACLC,QAAQ;MACRG,OAAO,EAAE;QACPd,IAAI,EAAE;UACJY,UAAU;UACVC;QACF;MACF;IACF,CAAC,CAAC;IAEF,IAAIX,KAAK,EAAE;MACT,OAAO;QACLa,OAAO,EAAE,KAAK;QACdV,OAAO,EAAEH,KAAK,CAACG;MACjB,CAAC;IACH;IAEA,OAAO;MACLU,OAAO,EAAE,IAAI;MACbV,OAAO,EAAE,8DAA8D;MACvEL;IACF,CAAC;EACH,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnB,OAAO;MACLa,OAAO,EAAE,KAAK;MACdV,OAAO,EAAEH,KAAK,CAACG,OAAO,IAAI;IAC5B,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,MAAM,GAAG,MAAAA,CACpBN,KAAa,EACbC,QAAgB,KAC+C;EAC/D,IAAI;IACF,MAAM;MAAEX,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACc,kBAAkB,CAAC;MAC7DP,KAAK;MACLC;IACF,CAAC,CAAC;IAEF,IAAIT,KAAK,EAAE;MACT,OAAO;QACLa,OAAO,EAAE,KAAK;QACdV,OAAO,EAAEH,KAAK,CAACG;MACjB,CAAC;IACH;IAEA,OAAO;MACLU,OAAO,EAAE,IAAI;MACbV,OAAO,EAAE,mBAAmB;MAC5BL;IACF,CAAC;EACH,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnB,OAAO;MACLa,OAAO,EAAE,KAAK;MACdV,OAAO,EAAEH,KAAK,CAACG,OAAO,IAAI;IAC5B,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,OAAO,GAAG,MAAAA,CAAA,KAA4D;EACjF,IAAI;IACF,MAAM;MAAEhB;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACe,OAAO,CAAC,CAAC;IAE/C,IAAIhB,KAAK,EAAE;MACT,OAAO;QACLa,OAAO,EAAE,KAAK;QACdV,OAAO,EAAEH,KAAK,CAACG;MACjB,CAAC;IACH;IAEA,OAAO;MACLU,OAAO,EAAE,IAAI;MACbV,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOH,KAAU,EAAE;IACnB,OAAO;MACLa,OAAO,EAAE,KAAK;MACdV,OAAO,EAAEH,KAAK,CAACG,OAAO,IAAI;IAC5B,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMc,aAAa,GAAG,MAC3BT,KAAa,IACsC;EACnD,IAAI;IACF,MAAM;MAAER;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACiB,qBAAqB,CAACV,KAAK,EAAE;MACjEW,UAAU,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;IACvC,CAAC,CAAC;IAEF,IAAItB,KAAK,EAAE;MACT,OAAO;QACLa,OAAO,EAAE,KAAK;QACdV,OAAO,EAAEH,KAAK,CAACG;MACjB,CAAC;IACH;IAEA,OAAO;MACLU,OAAO,EAAE,IAAI;MACbV,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOH,KAAU,EAAE;IACnB,OAAO;MACLa,OAAO,EAAE,KAAK;MACdV,OAAO,EAAEH,KAAK,CAACG,OAAO,IAAI;IAC5B,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMoB,cAAc,GAAG,MAC5BC,WAAmB,IACgC;EACnD,IAAI;IACF,MAAM;MAAExB;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAACwB,UAAU,CAAC;MAC/ChB,QAAQ,EAAEe;IACZ,CAAC,CAAC;IAEF,IAAIxB,KAAK,EAAE;MACT,OAAO;QACLa,OAAO,EAAE,KAAK;QACdV,OAAO,EAAEH,KAAK,CAACG;MACjB,CAAC;IACH;IAEA,OAAO;MACLU,OAAO,EAAE,IAAI;MACbV,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOH,KAAU,EAAE;IACnB,OAAO;MACLa,OAAO,EAAE,KAAK;MACdV,OAAO,EAAEH,KAAK,CAACG,OAAO,IAAI;IAC5B,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMrB,IAAI,GAAG,MAAMD,cAAc,CAAC,CAAC;EACnC,IAAI,CAACC,IAAI,EAAE,OAAO,IAAI;EAEtB,MAAM;IAAEP,IAAI;IAAEE;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnC+B,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAExB,IAAI,CAACyB,EAAE,CAAC,CACjBC,MAAM,CAAC,CAAC;EAEX,IAAI/B,KAAK,EAAE;IACTE,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACG,OAAO,CAAC;IACvD,OAAO,IAAI;EACb;EAEA,OAAOL,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMkC,iBAAiB,GAAG,MAAOC,OAAY,IAAK;EACvD,MAAM5B,IAAI,GAAG,MAAMD,cAAc,CAAC,CAAC;EACnC,IAAI,CAACC,IAAI,EAAE,OAAO;IAAEQ,OAAO,EAAE,KAAK;IAAEV,OAAO,EAAE;EAAoB,CAAC;EAElE,MAAM;IAAEL,IAAI;IAAEE;EAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnC+B,IAAI,CAAC,UAAU,CAAC,CAChBO,MAAM,CAACD,OAAO,CAAC,CACfJ,EAAE,CAAC,IAAI,EAAExB,IAAI,CAACyB,EAAE,CAAC,CACjBF,MAAM,CAAC,CAAC,CACRG,MAAM,CAAC,CAAC;EAEX,IAAI/B,KAAK,EAAE;IACT,OAAO;MACLa,OAAO,EAAE,KAAK;MACdV,OAAO,EAAEH,KAAK,CAACG;IACjB,CAAC;EACH;EAEA,OAAO;IACLU,OAAO,EAAE,IAAI;IACbV,OAAO,EAAE,+BAA+B;IACxCL;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}