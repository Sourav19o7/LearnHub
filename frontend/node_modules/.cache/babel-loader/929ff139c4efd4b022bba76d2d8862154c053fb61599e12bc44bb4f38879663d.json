{"ast":null,"code":"import axios from 'axios';\nimport { getSession } from './auth';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(async config => {\n  const session = await getSession();\n  if (session !== null && session !== void 0 && session.access_token) {\n    config.headers.Authorization = `Bearer ${session.access_token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor for error handling\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If the error is due to an expired token and we haven't retried yet\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Attempt to refresh token\n      const session = await getSession();\n      if (session !== null && session !== void 0 && session.refresh_token) {\n        // This would be where you'd call your refresh token endpoint\n        // For now, we'll just redirect to login\n        window.location.href = '/login';\n        return Promise.reject(error);\n      }\n    } catch (refreshError) {\n      console.error('Error refreshing token:', refreshError);\n      // Redirect to login page\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","getSession","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","session","access_token","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refresh_token","window","location","href","refreshError","console"],"sources":["C:/Users/soura/Projects/LearnHub/frontend/src/lib/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { getSession } from './auth';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    const session = await getSession();\r\n    if (session?.access_token) {\r\n      config.headers.Authorization = `Bearer ${session.access_token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If the error is due to an expired token and we haven't retried yet\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // Attempt to refresh token\r\n        const session = await getSession();\r\n        if (session?.refresh_token) {\r\n          // This would be where you'd call your refresh token endpoint\r\n          // For now, we'll just redirect to login\r\n          window.location.href = '/login';\r\n          return Promise.reject(error);\r\n        }\r\n      } catch (refreshError) {\r\n        console.error('Error refreshing token:', refreshError);\r\n        // Redirect to login page\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,QAAQ;AAEnC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1B,MAAOC,MAAM,IAAK;EAChB,MAAMC,OAAO,GAAG,MAAMb,UAAU,CAAC,CAAC;EAClC,IAAIa,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEC,YAAY,EAAE;IACzBF,MAAM,CAACJ,OAAO,CAACO,aAAa,GAAG,UAAUF,OAAO,CAACC,YAAY,EAAE;EACjE;EACA,OAAOF,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACJ,MAAM;;EAEpC;EACA,IAAI,EAAAQ,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMV,OAAO,GAAG,MAAMb,UAAU,CAAC,CAAC;MAClC,IAAIa,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEW,aAAa,EAAE;QAC1B;QACA;QACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QAC/B,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOY,YAAY,EAAE;MACrBC,OAAO,CAACb,KAAK,CAAC,yBAAyB,EAAEY,YAAY,CAAC;MACtD;MACAH,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}